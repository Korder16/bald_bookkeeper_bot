import logging
from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as fmt
from os import getenv
from dotenv import load_dotenv
from src import get_working_hours_info, get_last_match_results


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
bot_token = getenv("BALD_BOOKKEEPER_BOT_TOKEN")

if not bot_token:
    exit('Error: no token provided')

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='help')
async def help(message: types.Message):
    await message.answer(
        fmt.text(
            fmt.text('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥: '),
            fmt.text('–≤—Ä–µ–º—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è;'),
            fmt.text('–∫–æ—Å—Ç–∏ - –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏;'),
            fmt.text('—Ä–∞–º–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–º—É;'),
            fmt.text('–∫–ª–æ—É–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–æ—É–Ω–∞;'),
            fmt.text('—Å—Ç–∞—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã;'),
            fmt.text('–Ω–µ_—Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π –∏–≥—Ä—ã –ù–∏–∫–æ;'),
            fmt.text('–∫—É–¥–∞ - –æ–ø—Ä–æ—Å, –∫—É–¥–∞ –∏–¥–µ–º –∏–≥—Ä–∞—Ç—å;'),
            fmt.text('–ø–æ–ª—É—á–∫–∞ - —Å—Ç–∏–∫–µ—Ä —Å –ø–æ–ª—É—á–∫–æ–π.'),
            sep='\n'
        ), parse_mode='HTML'
    )


@dp.message_handler(commands='–∫–æ—Å—Ç–∏')
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(commands='–∫—É–¥–∞')
async def sigame_poll(message: types.Message):
    msg = await message.answer_poll(
        question='–ö—É–¥–∞ –∏–¥–µ–º?',
        options=['–î–æ—Ç–∞', '–°–≤–æ—è', '–ù–∞ –±–æ–∫–æ–≤—É—é'],
        allows_multiple_answers=True,
        is_anonymous=False
    )

    await bot.pin_chat_message(message.chat.id, msg['message_id'], disable_notification=False)


@dp.message_handler(commands='—Ä–∞–º–∞')
async def show_rama(message: types.Message):
    photo = open('media/rama.jpg', 'rb')
    await message.answer_photo(photo)


@dp.message_handler(commands=['–∫–ª–æ—É–Ω', '–¥—É—Ä–∞'])
async def show_clown(message: types.Message):
    photo = open('media/clown.jpg', 'rb')
    await message.answer_photo(photo)


@dp.message_handler(commands='–¥–æ–º–æ–π')
async def go_home(message: types.Message):
    await message.answer_sticker('CAACAgIAAxkBAAEFPvNizFgQ9nKuLwGp_kaDdp9DI2VpLgACERQAAqAAAehLhynfNnamXaEpBA')


@dp.message_handler(commands='–ø–æ–ª—É—á–∫–∞')
async def salary(message: types.Message):
    await message.answer_sticker('CAACAgIAAxkBAAEBLThizZnIHTLfN24LodNlBXYilqcoNQAC-w8AArGreUvmmZ8F9DW_NSkE')


@dp.message_handler(commands='—Å—Ç–∞—Ç–∞')
async def last_game(message: types.Message):
    username = str(message.from_user.username)
    match_info_image_bytes = await get_last_match_results(username)

    await message.answer_photo(match_info_image_bytes)


@dp.message_handler(commands='–Ω–µ_—Å–µ–≥–æ–¥–Ω—è')
async def not_today(message: types.Message):
    match_info_image_bytes = await get_last_match_results('NikoGasanov')

    await message.answer_photo(match_info_image_bytes)


@dp.message_handler(commands='–≤—Ä–µ–º—è')
async def get_time(message: types.Message):
    print(message.from_user)
    first_name = str(message.from_user.first_name)
    username = str(message.from_user.username)

    answer_message = f'{first_name}, {get_working_hours_info(username)}'
    await message.answer(answer_message)


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
