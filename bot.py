import logging
from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as fmt
from os import getenv
from dotenv import load_dotenv
from src import get_last_match_results, parse_user_config, get_allies_info_for_last_two_weeks, get_today_info_message, get_mr_incredible_sticker, get_pay_sticker_id, get_go_home_sticker_id, get_ronaldo_sticked_id
import random

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
bot_token = getenv("BALD_BOOKKEEPER_BOT_TOKEN")

if not bot_token:
    exit('Error: no token provided')

bot = Bot(token=bot_token)
dp = Dispatcher(bot)

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='help')
async def help(message: types.Message):
    await message.answer(
        fmt.text(
            fmt.text('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥: '),
            fmt.text('–≤—Ä–µ–º—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏ —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏;'),
            fmt.text('–∫–æ—Å—Ç–∏ - –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏;'),
            fmt.text('—Ä–∞–º–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–º—É;'),
            fmt.text('–∫–ª–æ—É–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–æ—É–Ω–∞;'),
            fmt.text('–¥—É—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—É—Ä—É;'),
            fmt.text('—Å—Ç–∞—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã;'),
            fmt.text('–Ω–µ_—Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π –∏–≥—Ä—ã –ù–∏–∫–æ;'),
            fmt.text('–∫—É–¥–∞ - –æ–ø—Ä–æ—Å, –∫—É–¥–∞ –∏–¥–µ–º –∏–≥—Ä–∞—Ç—å;'),
            fmt.text('–ø–æ–ª—É—á–∫–∞ - —Å—Ç–∏–∫–µ—Ä —Å –ø–æ–ª—É—á–∫–æ–π.'),
            fmt.text('–∫–µ–Ω—Ç—ã - –≤–∏–Ω—Ä–µ–π—Ç —Å –∫–µ–Ω—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.'),
            fmt.text('–±–µ–ª–∫–∞ - –ª—É–∑—Å—Ç—Ä–∏–∫ –†–∞—à–∏–¥–∞ –Ω–∞ –±–µ–ª–∫–µ.'),
            fmt.text('–ò–±—Ä–∞–≥–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò–±—Ä–∞–≥–∏–º–∞.'),
            sep='\n'
        ), parse_mode='HTML'
    )


@dp.message_handler(commands='–∫–æ—Å—Ç–∏')
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(commands='–∫—É–¥–∞')
async def sigame_poll(message: types.Message):
    msg = await message.answer_poll(
        question='–ö—É–¥–∞ –∏–¥–µ–º?',
        options=['–î–æ—Ç–∞', '–°–≤–æ—è', '–ù–∞ –±–æ–∫–æ–≤—É—é', '–ù–∞ –∑–∞–≤–æ–¥', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'],
        allows_multiple_answers=True,
        is_anonymous=False
    )

    await bot.pin_chat_message(message.chat.id, msg['message_id'], disable_notification=False)


@dp.message_handler(commands='—Ä–∞–º–∞')
async def show_rama(message: types.Message):
    with open('media/rama.webp', 'rb') as photo:
        await message.answer_photo(photo)


@dp.message_handler(commands='–∫–ª–æ—É–Ω')
async def show_clown(message: types.Message):
    with open('media/clown.webp', 'rb') as photo:
        await message.answer_photo(photo)


@dp.message_handler(commands='–¥—É—Ä–∞')
async def show_dura(message: types.Message):
    dura_images = ['media/clown.webp', 'media/dura.webp']
    with open(random.choice(dura_images), 'rb') as photo:
        await message.answer_photo(photo)


@dp.message_handler(commands='–¥–æ–º–æ–π')
async def go_home(message: types.Message):
    await message.answer_sticker(get_go_home_sticker_id())


@dp.message_handler(commands='–ø–æ–ª—É—á–∫–∞')
async def salary(message: types.Message):
    await message.answer_sticker(get_pay_sticker_id())


@dp.message_handler(commands='—Å—Ç–∞—Ç–∞')
async def last_game(message: types.Message):
    user_id = str(message.from_user.id)
    match_info_image = await get_last_match_results(user_id)

    await message.answer_photo(match_info_image)


@dp.message_handler(commands='–Ω–µ_—Å–µ–≥–æ–¥–Ω—è')
async def not_today(message: types.Message):
    match_info_image = await get_last_match_results('234173758')

    await message.answer_photo(match_info_image)


@dp.message_handler(commands='–∫–µ–Ω—Ç—ã')
async def teammates(message: types.Message):
    user_id = str(message.from_user.id)
    statistics_image = await get_allies_info_for_last_two_weeks(user_id)

    await message.answer_photo(statistics_image)


@dp.message_handler(commands='–≤—Ä–µ–º—è')
async def get_time(message: types.Message):
    user_id = str(message.from_user.id)
    await message.answer(get_today_info_message(user_id))
    await message.answer_sticker(get_mr_incredible_sticker())


@dp.message_handler(commands='–±–µ–ª–∫–∞')
async def squirrel(message: types.Message):
    with open('media/squirrel.webp', 'rb') as photo:
        await message.answer_photo(photo)
    await message.answer_sticker(get_ronaldo_sticked_id())


@dp.message_handler(commands='–∏–±—Ä–∞–≥–∏–º')
async def ibragym(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id == '207565268':
        with open('media/rock.mp4', 'rb') as gif:
            await message.answer_animation(gif)
    else:
        ibragym_images = ['media/ibragym.webp', 'media/ibragym_2.webp']
        with open(random.choice(ibragym_images), 'rb') as photo:
            await message.answer_photo(photo)


if __name__ == "__main__":
    parse_user_config()
    executor.start_polling(dp, skip_updates=True)
