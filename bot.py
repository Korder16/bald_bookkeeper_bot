import logging
from aiogram import Bot, Dispatcher, executor, types
import aiogram.utils.markdown as fmt
from os import getenv
from dotenv import load_dotenv
from src import get_last_match_results, get_allies_info_for_last_two_weeks, get_today_info_message, get_mr_incredible_sticker, sticker_ids, count_days_without_marathon, count_day_from_ex_ancient
import random
from src import image_api_generator_client
from src.photos import photo_ids
from src.animations import animation_ids


logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

load_dotenv()
bot_token = getenv("BALD_BOOKKEEPER_BOT_TOKEN")

if not bot_token:
    exit('Error: no token provided')


bot = Bot(token=bot_token)
dp = Dispatcher(bot)

current_photo_ids = photo_ids[getenv("BOT_TYPE")]
current_animation_ids = animation_ids[getenv("BOT_TYPE")]

logging.basicConfig(level=logging.INFO)


@dp.message_handler(commands='help')
async def help(message: types.Message):
    await message.answer(
        fmt.text(
            fmt.text('–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–º–∞–Ω–¥: '),
            fmt.text('/–≤—Ä–µ–º—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –æ—Å—Ç–∞–ª–æ—Å—å –¥–æ –∫–æ–Ω—Ü–∞ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è –∏ —Ä–∞–±–æ—á–µ–π –Ω–µ–¥–µ–ª–∏;'),
            fmt.text('/–∫–æ—Å—Ç–∏ - –ø–æ–¥–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏–≥—Ä–∞–ª—å–Ω—ã–µ –∫–æ—Å—Ç–∏;'),
            fmt.text('/—Ä–∞–º–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–º—É;'),
            fmt.text('/–∫–ª–æ—É–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–æ—É–Ω–∞;'),
            fmt.text('/–¥—É—Ä–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥—É—Ä—É;'),
            fmt.text('/—Å—Ç–∞—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–≤–æ–µ–π –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–≥—Ä—ã;'),
            fmt.text('/–Ω–µ_—Å–µ–≥–æ–¥–Ω—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–µ–π—Ç–∏–Ω–≥–æ–≤–æ–π –∏–≥—Ä—ã –ù–∏–∫–æ;'),
            fmt.text('/–∫—É–¥–∞ - –æ–ø—Ä–æ—Å, –∫—É–¥–∞ –∏–¥–µ–º –∏–≥—Ä–∞—Ç—å;'),
            fmt.text('/–ø–æ–ª—É—á–∫–∞ - —Å—Ç–∏–∫–µ—Ä —Å –ø–æ–ª—É—á–∫–æ–π.'),
            fmt.text('/–∫–µ–Ω—Ç—ã - –≤–∏–Ω—Ä–µ–π—Ç —Å –∫–µ–Ω—Ç–∞–º–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –Ω–µ–¥–µ–ª–∏.'),
            fmt.text('/–±–µ–ª–∫–∞ - –ª—É–∑—Å—Ç—Ä–∏–∫ –†–∞—à–∏–¥–∞ –Ω–∞ –±–µ–ª–∫–µ.'),
            fmt.text('/–ò–±—Ä–∞–≥–∏–º - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ò–±—Ä–∞–≥–∏–º–∞.'),
            fmt.text('/–º–∞—Ä–∞—Ñ–æ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –±–µ–∑ –º–∞—Ä–∞—Ñ–æ–Ω–∞.'),
            fmt.text('/–≤–ª–∞—Å—Ç–µ–ª–∏–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –ú–∏—Ö–∞–Ω –±—ã–ª –∞–∫—Ç–∏–≤–Ω—ã–º –≤–ª–∞—Å—Ç–µ–ª–∏–Ω–æ–º.'),
            fmt.text('/–ø–∞—Ö–∞—Ç—å - –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å, –Ω—É–∂–Ω–æ –ª–∏ –ø–∞—Ö–∞—Ç—å.'),
            sep='\n'
        ), parse_mode='HTML'
    )


@dp.message_handler(commands='–∫–æ—Å—Ç–∏')
async def cmd_dice(message: types.Message):
    await message.answer_dice(emoji="üé≤")


@dp.message_handler(commands='–∫—É–¥–∞')
async def sigame_poll(message: types.Message):
    msg = await message.answer_poll(
        question='–ö—É–¥–∞ –∏–¥–µ–º?',
        options=['–î–æ—Ç–∞', '–°–≤–æ—è', '–ù–∞ –±–æ–∫–æ–≤—É—é', '–ù–∞ –∑–∞–≤–æ–¥', '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'],
        allows_multiple_answers=True,
        is_anonymous=False
    )

    await bot.pin_chat_message(message.chat.id, msg['message_id'], disable_notification=False)


@dp.message_handler(commands='—Ä–∞–º–∞')
async def show_rama(message: types.Message):
    await message.answer_photo(photo=current_photo_ids['rama'])


@dp.message_handler(commands='–∫–ª–æ—É–Ω')
async def show_clown(message: types.Message):
    await message.answer_photo(photo=current_photo_ids['clown'])


@dp.message_handler(commands='–¥—É—Ä–∞')
async def show_dura(message: types.Message):
    await message.answer_photo(photo=random.choice(current_photo_ids['dura']))


@dp.message_handler(commands='–¥–æ–º–æ–π')
async def go_home(message: types.Message):
    await message.answer_sticker(sticker_ids['go_home'])


@dp.message_handler(commands='–ø–æ–ª—É—á–∫–∞')
async def salary(message: types.Message):
    await message.answer_sticker(sticker_ids['pay'])


@dp.message_handler(commands='—Å—Ç–∞—Ç–∞')
async def last_game(message: types.Message):
    user_id = str(message.from_user.id)
    last_match_results, is_win = await get_last_match_results(user_id)

    client = image_api_generator_client()
    response_image = await client.get_last_game_statistics_image(last_match_results)
    await message.answer_photo(response_image)

    if is_win:
        photo_name = current_photo_ids['win_game']
    else:
        photo_name = current_photo_ids['loose_game']

    await message.answer_photo(photo=photo_name)


@dp.message_handler(commands='–Ω–µ_—Å–µ–≥–æ–¥–Ω—è')
async def not_today(message: types.Message):
    match_info, is_win = await get_last_match_results('234173758')

    client = image_api_generator_client()
    response_image = await client.get_last_game_statistics_image(match_info)
    await message.answer_photo(response_image)

    if is_win:
        photo_name = current_photo_ids['win_game']
    else:
        photo_name = current_photo_ids['loose_game']

    await message.answer_photo(photo=photo_name)


async def teammates(message: types.Message):
    user_id = str(message.from_user.id)
    allies_info = await get_allies_info_for_last_two_weeks(user_id)

    client = image_api_generator_client()
    response_image = await client.get_teammates_statistics_image(user_id, allies_info)
    await message.answer_photo(response_image)


@dp.message_handler(commands='–≤—Ä–µ–º—è')
async def get_time(message: types.Message):
    user_id = message.from_user.id
    await message.answer(get_today_info_message(user_id))
    await message.answer_sticker(get_mr_incredible_sticker())


@dp.message_handler(commands='–±–µ–ª–∫–∞')
async def squirrel(message: types.Message):
    await message.answer_photo(photo=current_photo_ids['squirrel'])
    await message.answer_sticker(sticker_ids['ronaldo'])


@dp.message_handler(commands='–∏–±—Ä–∞–≥–∏–º')
async def ibragym(message: types.Message):
    user_id = str(message.from_user.id)

    if user_id == '207565268':
        await message.answer_animation(animation=current_animation_ids['rock'])
    else:
        await message.answer_photo(photo=random.choice(current_photo_ids['ibragym_images']))


@dp.message_handler(commands='–¥—É–∑–∞')
async def medusa(message: types.Message):
    await message.answer_photo(photo=current_photo_ids['medusa'])
    await message.answer_sticker(sticker_ids['ronaldo'])


@dp.message_handler(commands='–º–∞—Ä–∞—Ñ–æ–Ω')
async def marathon(message: types.Message):
    await message.answer(count_days_without_marathon())
    await message.answer_photo(photo=current_photo_ids['marathon'])


@dp.message_handler(commands='–≤–ª–∞—Å—Ç–µ–ª–∏–Ω')
async def ex_ancient(message: types.Message):
    await message.answer(count_day_from_ex_ancient())


@dp.message_handler(commands='–ø–∞—Ö–∞—Ç—å')
async def work_hard(message: types.Message):
    work_urls = [
        'https://youtube.com/shorts/Ldl4BIK3Hbo?feature=share',
        'https://youtube.com/shorts/SCO2LHHY14o?feature=share'
    ]

    await message.answer_video(random.choice(work_urls))

@dp.message_handler(content_types=['photo'])
async def get_id(message: types.Message):
    await message.answer(message.photo[0].file_id)

@dp.message_handler(content_types=['animation'])
async def get_id(message: types.Message):
    await message.answer(message.animation.file_id)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
